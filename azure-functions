------azure functions
they scale dynamically
on demand scaling
on demand serverless code completely managed
supports multiple languages 
based on triggers and bindings

----benefits
programming model is simple and flexible
less code
less cost
no need to manage servers

----function app
a unit of development and deployment, when need to create a function first need to create function app and can have many functions
designed specifically for hosting and running azure functions

consumption plan: default, pay only when functions are running, scale out automatically acc to workload
premium: vnet connectivity, unlimited execution duration, premium instance sizes
   cons: higher prize, 
dedicated(app service) plan: dedicated vm, resuse ur existing app service
   cons: no serverless- u have to manage b ur own u are respsnisble for provising and managing computing resource

----architecture
core file uses : function.json: conf metadata for a particular function, can be edited in portal based functions
host.json: contains global configuretion option and impact all functions in function app
local.settings.json: local configuration settings of our application, ignored by git and azure, Iconfiguration

----creating function app
using portal
using CLI
using ARM templates: using json files 

------azure function core tools
help to test, develop, run and debug azure functions on local computer

func
func init
func new
func start
func start --verbose
whcih func

----triggers and boundings
triggers define how a function is executed, functions can have only one trigger
bindings allows to connect data and services to and from the function, functions can have multiple input or output bindings r not at all
types of bindings: http, blob storage, service bus queue,cosmo db, event hubs 

----blob storage photo upload resizing
we can first resize the uploaded photo and after that we can up
[Blob(photos-small/{name}), FileAccess.Write, Connection=Literals.SorageConnectionString]  ??


----- creating and preparing analyzer service projects
-----creating a startup class and injecting the dependency
----Implementing AnalyzerService logic using the Computer Vision cognitive service

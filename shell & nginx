SSH : secured shell is used to create a secure connection from a client(local system) to run a shell on remote system.
we use computer that is not is front of us throgh a local terminal or console and we need to control a system remotely to make any changes configurations or to install any software 

ssh involves network technologies how IP networking works also knowledge of command line 

 SSH is primarily a network-based technology, and we use it to connect from one system to another. So in order to work with SSH as we learn, we'll need at least two computers connected by a network




##########------------NGINX----------##########
quickly becoming the leading web server
efficient and consistent under heavy load
easy to configure

port 22 is for ssh traffic 
port 80 for web traffic
port 443 for encrypted web traffic 

-----apache vs nginx

----nginx cli
use to check status, stop and start the service, ceck the service configuration
nginx -v
nginx -h
systemctl status nginx
systemctl reload nginx
systemctl restart nginx
systemctl stop nginx
systemctl status nginx --no-pager

----files and directories
cd /etc/nginx
main conf file: nginx.conf
               more nginx.conf
cd /var/log/nginx : defualt where nginx stores logs
            head access.log
            head error.logs
cd /var/www : 

-----whats inside nginx.conf
----how to add files to root directory

##For configuration files stored in the /etc/nginx/conf.d directory, what will be the file extension?
Standard NGINX configurations use the .conf extension so that they are processed by the include statement in the http directive of /etc/nginx.conf
##The /etc/nginx directory holds the configuration for the entire NGINX installation. Inside this directory, you’ll find the files that control the way the web server runs along with the files that define the web sites being served.
##What might happen if a server block does not include the server_name directive when NGINX is serving multiple sites from the same IP address?
NGINX might serve the wrong content.

##systemctl reload nginx : This command tells NGINX to reload all configuration files from disk. Because NGINX loads its configuration into memory when it first starts, the reload command is needed if any changes are made to the configuration and need to be applied.

## How does NGINX use the default_server directive?
Because NGINX can serve multiple sites from the same IP address, the default_server statement is used to tell NGINX to use a particular server configuration if no other configurations match the name of the site being requested.

##The command "nginx -t" checks the configuration without stopping or reloading the service. Using this option, we can make changes to the configuration and then test them before reloading it.

##listen 80 : The listen directive is used to tell NGINX which port to listen on for requests to serve. The default port for web servers to listen on is 80.
## main configuration file : /etc/nginx/nginx.conf is the main configuration file for NGINX. It contains configuration for the main server program and can load other configurations as well.
##One of the best ways to confirm that NGINX is installed correctly is to open a browser to the server's IP address.
##The settings used to configure NGINX are called directives.

----- location directive directive used to control sites conf is : location directive
allows us to extend our configuration, based on URI of request being processed by the server
location directives are formatted as blocks, also can be nested inside another location blocks
--location modifiers are also used : = ~ ~* ^~

--location definations : 
prefix string and regular expressions 
nginx checks locations with prefix strig first, regular expressions are checked when they apperaed in the configuration
---locaion processing:
exact match loaction are identified first then prefix string location  and regular expression location

---configure location
site root
images
error pages

----configure logs
NGINX uses log files to store various operational details for monitoeing normal operations and tracking down issues if problem occurs.

types: 
access logs: time of request, result of request, clint IP address, client browser type
error logs: configuration errors, service stops and start, service errors

---troubleshooting errors:
* checking configuration errors using : nginx -t identify the error and line number

* if errors are not identified by nginx -t command
systemctl status nginx
systemctl reload nginx
systemctl restart nginx

*checking the ports: standard ports for web traffic to open are 8 and 443
sudo lsof -i :80 -i :443 | grep nginx   (lsof : list of open files)
sudo apt install net-tools (give info of all network connections)
sudo netstat -plan | grep nginx

* to check logs
tail -f /var/logs/nginx/*.logs

Location directives are formatted as blocks and are defined inside server blocks. They can also be nested inside other location blocks.

Default logging is configured in the http context and can be overridden in the server and location contexts.

NGINX uses log files to record various operational details like the date, time, and name of a file that was served. These logs are useful for monitoring normal operation and tracking down issues if a problem occurs.

The try_files directive gives NGINX a list of files or directories to look for, relative to the location. The first file or directory that matches gets processed. If no items in the list match, then the last item in the list is used as a URI or an error code.

When NGINX can’t find any content to respond to a request, it displays a 404 error page.

location directive is useful for configuring NGINX to process different requests in ways similar to server blocks without having to create additional servers
and extending an NGINX configuration based on the URI being processed by the server

A good first step in troubleshooting is to make sure NGINX is running. The systemctl status NGINX command gives output that confirms whether NGINX is running or not


-----reverse proxy
Reverse Proxy:
-Nginx sits between clients (like web browsers) and backend servers (like application servers or databases).
-It receives client requests and forwards them to the appropriate backend server.
-This helps hide the internal structure of your server and improves security by serving as a barrier.
Example: Nginx receives requests from clients, forwards them to backend servers, and returns the responses to clients.

Load Balancer:
-Nginx distributes incoming client requests across multiple backend servers.
-This improves performance and ensures no single server gets overwhelmed.
-Nginx can use various load-balancing algorithms (e.g., round-robin, least connections) to distribute the load.
Example: Nginx balances traffic across multiple web servers to handle high traffic efficiently, improving overall system reliability and performance.

--support session persistence
Session persistence, also known as session affinity or sticky sessions, is a feature of load balancers that ensures a client's requests are always directed to the same backend server during a session. This is important for applications where maintaining state or context across multiple requests from the same client is necessary.

-- upstream directive
grp together servers allowing other directive to refrence all of the servers as a single unit 
used to define a group of servers that can handle requests for a particular location
